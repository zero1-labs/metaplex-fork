{"version":3,"file":"executeSale.cjs","sources":["../../../../../src/plugins/auctionHouseModule/operations/executeSale.ts"],"sourcesContent":["import {\n  ConfirmOptions,\n  PublicKey,\n  SYSVAR_INSTRUCTIONS_PUBKEY,\n} from '@solana/web3.js';\nimport type { Metaplex } from '@/Metaplex';\nimport { TransactionBuilder, Option, DisposableScope } from '@/utils';\nimport {\n  createAuctioneerExecuteSaleInstruction,\n  createExecuteSaleInstruction,\n  createPrintPurchaseReceiptInstruction,\n} from '@metaplex-foundation/mpl-auction-house';\nimport {\n  useOperation,\n  Operation,\n  OperationHandler,\n  Pda,\n  lamports,\n  Signer,\n  SolAmount,\n  SplTokenAmount,\n  amount,\n  isSigner,\n  now,\n} from '@/types';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { findAssociatedTokenAccountPda } from '../../tokenModule';\nimport { AuctionHouse, Bid, Listing, LazyPurchase, Purchase } from '../models';\nimport {\n  findAuctionHouseBuyerEscrowPda,\n  findAuctionHouseProgramAsSignerPda,\n  findAuctionHouseTradeStatePda,\n  findPurchaseReceiptPda,\n  findAuctioneerPda,\n} from '../pdas';\nimport {\n  AuctioneerAuthorityRequiredError,\n  BidAndListingHaveDifferentAuctionHousesError,\n  BidAndListingHaveDifferentMintsError,\n  CanceledBidIsNotAllowedError,\n  CanceledListingIsNotAllowedError,\n} from '../errors';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'ExecuteSaleOperation' as const;\n\n/**\n * Executes a sale on a given bid and listing.\n *\n * ```ts\n * await metaplex\n *   .auctionHouse()\n *   .executeSale({ auctionHouse, bid, listing })\n *   .run();\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const executeSaleOperation = useOperation<ExecuteSaleOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type ExecuteSaleOperation = Operation<\n  typeof Key,\n  ExecuteSaleInput,\n  ExecuteSaleOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type ExecuteSaleInput = {\n  /**\n   * The Bid that is used in the sale.\n   * We only need a subset of the `Bid` model but we\n   * need enough information regarding its settings to know how\n   * to execute the sale.\n   *\n   * This includes, its asset, auction house address, buyer, receipt address etc.\n   */\n  bid: Pick<\n    Bid,\n    | 'asset'\n    | 'auctionHouse'\n    | 'buyerAddress'\n    | 'canceledAt'\n    | 'price'\n    | 'receiptAddress'\n    | 'tokens'\n    | 'tradeStateAddress'\n  >;\n\n  /**\n   * The Listing that is used in the sale.\n   * We only need a subset of the `Listing` model but we\n   * need enough information regarding its settings to know how\n   * to execute the sale.\n   *\n   * This includes, its asset, auction house address, seller, receipt address etc.\n   */\n  listing: Pick<\n    Listing,\n    | 'asset'\n    | 'auctionHouse'\n    | 'canceledAt'\n    | 'sellerAddress'\n    | 'tradeStateAddress'\n    | 'receiptAddress'\n  >;\n\n  /** The Auction House in which to execute a sale. */\n  auctionHouse: AuctionHouse;\n\n  /**\n   * The Auctioneer authority key.\n   * It is required when Auction House has Auctioneer enabled.\n   *\n   * @defaultValue No default value.\n   */\n  auctioneerAuthority?: Signer; // Use Auctioneer ix when provided\n\n  /**\n   * The address of the bookkeeper wallet responsible for the receipt.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  bookkeeper?: Signer;\n\n  /**\n   * Prints the purchase receipt.\n   * The receipt holds information about the purchase,\n   * So it's important to print it if you want to use the `Purchase` model\n   *\n   * @defaultValue `true`\n   */\n  printReceipt?: boolean; // Default: true\n\n  /** A set of options to configure how the transaction is sent and confirmed. */\n  confirmOptions?: ConfirmOptions;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type ExecuteSaleOutput = {\n  /** Seller trade state account address encoding the listing order. */\n  sellerTradeState: PublicKey;\n\n  /** Biyer trade state account address encoding the bid order. */\n  buyerTradeState: PublicKey;\n\n  /** The buyer address. */\n  buyer: PublicKey;\n\n  /** The seller address. */\n  seller: PublicKey;\n\n  /** The asset's metadata address. */\n  metadata: PublicKey;\n\n  /** The address of the bookkeeper account responsible for the receipt. */\n  bookkeeper: Option<PublicKey>;\n\n  /** The PDA of the receipt account in case it was printed. */\n  receipt: Option<Pda>;\n\n  /** The sale price. */\n  price: SolAmount | SplTokenAmount;\n\n  /** The number of tokens bought. */\n  tokens: SplTokenAmount;\n\n  /** A model that keeps information about the Purchase. */\n  purchase: Purchase;\n\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * Executes a sale on a given bid and listing.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .auctionHouse()\n *   .builders()\n *   .executeSale({ auctionHouse, listing, bid });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const executeSaleOperationHandler: OperationHandler<ExecuteSaleOperation> =\n  {\n    async handle(\n      operation: ExecuteSaleOperation,\n      metaplex: Metaplex,\n      scope: DisposableScope\n    ): Promise<ExecuteSaleOutput> {\n      const { auctionHouse } = operation.input;\n\n      const output = await executeSaleBuilder(\n        metaplex,\n        operation.input\n      ).sendAndConfirm(metaplex, operation.input.confirmOptions);\n      scope.throwIfCanceled();\n\n      if (output.receipt) {\n        const purchase = await metaplex\n          .auctionHouse()\n          .findPurchaseByReceipt({\n            auctionHouse,\n            receiptAddress: output.receipt,\n          })\n          .run(scope);\n\n        return { purchase, ...output };\n      }\n\n      const lazyPurchase: LazyPurchase = {\n        model: 'purchase',\n        lazy: true,\n        auctionHouse: operation.input.auctionHouse,\n        buyerAddress: output.buyer,\n        sellerAddress: output.seller,\n        metadataAddress: output.metadata,\n        bookkeeperAddress: output.bookkeeper,\n        receiptAddress: output.receipt,\n        price: output.price,\n        tokens: output.tokens.basisPoints,\n        createdAt: now(),\n      };\n\n      return {\n        purchase: await metaplex\n          .auctionHouse()\n          .loadPurchase({ lazyPurchase })\n          .run(scope),\n        ...output,\n      };\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type ExecuteSaleBuilderParams = Omit<\n  ExecuteSaleInput,\n  'confirmOptions'\n> & {\n  instructionKey?: string;\n};\n\n/**\n * @group Transaction Builders\n * @category Contexts\n */\nexport type ExecuteSaleBuilderContext = Omit<\n  ExecuteSaleOutput,\n  'response' | 'purchase'\n>;\n\n/**\n * @group Transaction Builders\n * @category Constructors\n */\nexport const executeSaleBuilder = (\n  metaplex: Metaplex,\n  params: ExecuteSaleBuilderParams\n): TransactionBuilder<ExecuteSaleBuilderContext> => {\n  const { auctionHouse, listing, bid, auctioneerAuthority } = params;\n  const { sellerAddress, asset } = listing;\n  const { buyerAddress, tokens } = bid;\n  const {\n    hasAuctioneer,\n    isNative,\n    treasuryMint,\n    address: auctionHouseAddress,\n    authorityAddress,\n    treasuryAccountAddress,\n  } = auctionHouse;\n\n  if (!listing.auctionHouse.address.equals(bid.auctionHouse.address)) {\n    throw new BidAndListingHaveDifferentAuctionHousesError();\n  }\n  if (!listing.asset.address.equals(bid.asset.address)) {\n    throw new BidAndListingHaveDifferentMintsError();\n  }\n  if (bid.canceledAt) {\n    throw new CanceledBidIsNotAllowedError();\n  }\n  if (listing.canceledAt) {\n    throw new CanceledListingIsNotAllowedError();\n  }\n  if (hasAuctioneer && !auctioneerAuthority) {\n    throw new AuctioneerAuthorityRequiredError();\n  }\n\n  // Data.\n  const price = isNative\n    ? lamports(bid.price.basisPoints)\n    : amount(bid.price.basisPoints, treasuryMint.currency);\n\n  // Accounts.\n  const sellerPaymentReceiptAccount = isNative\n    ? sellerAddress\n    : findAssociatedTokenAccountPda(treasuryMint.address, sellerAddress);\n  const buyerReceiptTokenAccount = findAssociatedTokenAccountPda(\n    asset.address,\n    buyerAddress\n  );\n  const escrowPayment = findAuctionHouseBuyerEscrowPda(\n    auctionHouseAddress,\n    buyerAddress\n  );\n  const freeTradeState = findAuctionHouseTradeStatePda(\n    auctionHouseAddress,\n    sellerAddress,\n    treasuryMint.address,\n    asset.address,\n    lamports(0).basisPoints,\n    tokens.basisPoints,\n    asset.token.address\n  );\n  const programAsSigner = findAuctionHouseProgramAsSignerPda();\n\n  const accounts = {\n    buyer: buyerAddress,\n    seller: sellerAddress,\n    tokenAccount: asset.token.address,\n    tokenMint: asset.address,\n    metadata: asset.metadataAddress,\n    treasuryMint: treasuryMint.address,\n    escrowPaymentAccount: escrowPayment,\n    sellerPaymentReceiptAccount,\n    buyerReceiptTokenAccount,\n    authority: authorityAddress,\n    auctionHouse: auctionHouseAddress,\n    auctionHouseFeeAccount: auctionHouse.feeAccountAddress,\n    auctionHouseTreasury: treasuryAccountAddress,\n    buyerTradeState: bid.tradeStateAddress,\n    sellerTradeState: listing.tradeStateAddress,\n    freeTradeState,\n    programAsSigner,\n  };\n\n  // Args.\n  const args = {\n    freeTradeStateBump: freeTradeState.bump,\n    escrowPaymentBump: escrowPayment.bump,\n    programAsSignerBump: programAsSigner.bump,\n    buyerPrice: price.basisPoints,\n    tokenSize: tokens.basisPoints,\n  };\n\n  // Execute Sale Instruction\n  let executeSaleInstruction = createExecuteSaleInstruction(accounts, args);\n  if (auctioneerAuthority) {\n    executeSaleInstruction = createAuctioneerExecuteSaleInstruction(\n      {\n        ...accounts,\n        auctioneerAuthority: auctioneerAuthority.publicKey,\n        ahAuctioneerPda: findAuctioneerPda(\n          auctionHouseAddress,\n          auctioneerAuthority.publicKey\n        ),\n      },\n      args\n    );\n  }\n\n  // Provide additional keys to pay royalties.\n  asset.creators.forEach(({ address }) => {\n    executeSaleInstruction.keys.push({\n      pubkey: address,\n      isWritable: true,\n      isSigner: false,\n    });\n\n    // Provide ATA to receive SPL token royalty if is not native SOL sale.\n    if (!isNative) {\n      executeSaleInstruction.keys.push({\n        pubkey: findAssociatedTokenAccountPda(treasuryMint.address, address),\n        isWritable: true,\n        isSigner: false,\n      });\n    }\n  });\n\n  // Signers.\n  const executeSaleSigners = [auctioneerAuthority].filter(isSigner);\n\n  // Receipt.\n  const shouldPrintReceipt =\n    (params.printReceipt ?? true) &&\n    Boolean(listing.receiptAddress && bid.receiptAddress);\n  const bookkeeper = params.bookkeeper ?? metaplex.identity();\n  const purchaseReceipt = findPurchaseReceiptPda(\n    listing.tradeStateAddress,\n    bid.tradeStateAddress\n  );\n\n  return (\n    TransactionBuilder.make<ExecuteSaleBuilderContext>()\n      .setContext({\n        sellerTradeState: listing.tradeStateAddress,\n        buyerTradeState: bid.tradeStateAddress,\n        buyer: buyerAddress,\n        seller: sellerAddress,\n        metadata: asset.metadataAddress,\n        bookkeeper: shouldPrintReceipt ? bookkeeper.publicKey : null,\n        receipt: shouldPrintReceipt ? purchaseReceipt : null,\n        price,\n        tokens,\n      })\n\n      // Execute Sale.\n      .add({\n        instruction: executeSaleInstruction,\n        signers: executeSaleSigners,\n        key: params.instructionKey ?? 'executeSale',\n      })\n\n      // Print the Purchase Receipt.\n      .when(shouldPrintReceipt, (builder) =>\n        builder.add({\n          instruction: createPrintPurchaseReceiptInstruction(\n            {\n              purchaseReceipt: purchaseReceipt,\n              listingReceipt: listing.receiptAddress as Pda,\n              bidReceipt: bid.receiptAddress as Pda,\n              bookkeeper: bookkeeper.publicKey,\n              instruction: SYSVAR_INSTRUCTIONS_PUBKEY,\n            },\n            { purchaseReceiptBump: purchaseReceipt.bump }\n          ),\n          signers: [bookkeeper],\n          key: 'printPurchaseReceipt',\n        })\n      )\n  );\n};\n"],"names":["Key","executeSaleOperation","useOperation","executeSaleOperationHandler","handle","operation","metaplex","scope","auctionHouse","input","output","executeSaleBuilder","sendAndConfirm","confirmOptions","throwIfCanceled","receipt","purchase","findPurchaseByReceipt","receiptAddress","run","lazyPurchase","model","lazy","buyerAddress","buyer","sellerAddress","seller","metadataAddress","metadata","bookkeeperAddress","bookkeeper","price","tokens","basisPoints","createdAt","now","loadPurchase","params","listing","bid","auctioneerAuthority","asset","hasAuctioneer","isNative","treasuryMint","address","auctionHouseAddress","authorityAddress","treasuryAccountAddress","equals","BidAndListingHaveDifferentAuctionHousesError","BidAndListingHaveDifferentMintsError","canceledAt","CanceledBidIsNotAllowedError","CanceledListingIsNotAllowedError","AuctioneerAuthorityRequiredError","lamports","amount","currency","sellerPaymentReceiptAccount","findAssociatedTokenAccountPda","buyerReceiptTokenAccount","escrowPayment","findAuctionHouseBuyerEscrowPda","freeTradeState","findAuctionHouseTradeStatePda","token","programAsSigner","findAuctionHouseProgramAsSignerPda","accounts","tokenAccount","tokenMint","escrowPaymentAccount","authority","auctionHouseFeeAccount","feeAccountAddress","auctionHouseTreasury","buyerTradeState","tradeStateAddress","sellerTradeState","args","freeTradeStateBump","bump","escrowPaymentBump","programAsSignerBump","buyerPrice","tokenSize","executeSaleInstruction","createExecuteSaleInstruction","createAuctioneerExecuteSaleInstruction","publicKey","ahAuctioneerPda","findAuctioneerPda","creators","forEach","keys","push","pubkey","isWritable","isSigner","executeSaleSigners","filter","shouldPrintReceipt","printReceipt","Boolean","identity","purchaseReceipt","findPurchaseReceiptPda","TransactionBuilder","make","setContext","add","instruction","signers","key","instructionKey","when","builder","createPrintPurchaseReceiptInstruction","listingReceipt","bidReceipt","SYSVAR_INSTRUCTIONS_PUBKEY","purchaseReceiptBump"],"mappings":"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"}